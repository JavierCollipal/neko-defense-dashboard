# 🐾⚡ NEKO DEFENSE DASHBOARD - OPTIMIZED CI/CD PIPELINE (2025) ⚡🐾
#
# Research-backed best practices from:
# - Cypress Cloud GitHub Actions integration (2025)
# - Next.js 14 CI/CD optimization
# - GitHub Actions caching strategies (v4)
#
# Pipeline: Lint → Format → Build → E2E Tests (Parallel + Cloud) → Deploy
#
# ═══════════════════════════════════════════════════════════════════════════════
# 📋 COMPLIANCE WITH CLAUDE.MD RULES:
# - Rule 2.1: CI/CD Pipeline Rules ✅
# - Rule 1.0: Cypress Cloud Configuration ✅
# - Rule 2.6: Code Formatting Rules ✅
# - Rule 1.4: Deployment Procedures ✅
# - Rule 1.2: Testing Standards ✅
# ═══════════════════════════════════════════════════════════════════════════════

name: 🚀 CI/CD Pipeline (Optimized)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Manual trigger

# Cancel in-progress runs for same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  # Cypress Cloud (Rule 1.0)
  CYPRESS_PROJECT_ID: '9xzw4h'
  # MongoDB Atlas
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  MONGODB_DATABASE: 'neko-defense-system'
  # Production API URLs
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'https://seed-subtle-jar-screw.trycloudflare.com' }}
  NEXT_PUBLIC_GRAPHQL_URL: ${{ secrets.NEXT_PUBLIC_GRAPHQL_URL || 'https://bass-gain-pairs-pad.trycloudflare.com' }}

jobs:
  # ═══════════════════════════════════════════════════════════════════════════
  # 🔍 STAGE 1: CODE QUALITY & FORMATTING
  # ═══════════════════════════════════════════════════════════════════════════
  quality:
    name: 🔍 Code Quality & Formatting
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      # ✅ ENFORCED: Linting must pass (Rule 2.1)
      - name: 🔍 Run ESLint
        run: npm run lint

      # ✅ NEW: Prettier formatting check (Rule 2.6)
      - name: 🎨 Check code formatting
        run: npm run format:check
        continue-on-error: false # Formatting is ENFORCED!

      - name: ✅ Code quality passed
        run: |
          echo "🐾⚡ Code quality checks PASSED, nyaa~! ⚡🐾"
          echo "✅ ESLint: PASS"
          echo "✅ Prettier: PASS"

  # ═══════════════════════════════════════════════════════════════════════════
  # 🏗️ STAGE 2: BUILD APPLICATION
  # ═══════════════════════════════════════════════════════════════════════════
  build:
    name: 🏗️ Build Next.js App
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # ⚡ OPTIMIZED: Advanced caching strategy (2025 best practice)
      - name: 💾 Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🏗️ Build Next.js
        run: npm run build
        env:
          CI: false # Prevent warnings from failing build
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_GRAPHQL_URL: ${{ env.NEXT_PUBLIC_GRAPHQL_URL }}

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            .next
            public
            package.json
            package-lock.json
          retention-days: 7

      - name: 📊 Build size analysis
        run: |
          echo "🐾 Build completed successfully, nyaa~!"
          echo "📦 Build size:"
          du -sh .next
          echo ""
          echo "📄 Main chunks:"
          find .next -name "*.js" -type f -exec du -h {} \; | sort -rh | head -10

  # ═══════════════════════════════════════════════════════════════════════════
  # 🧪 STAGE 3: E2E TESTS WITH CYPRESS CLOUD (PARALLEL)
  # ═══════════════════════════════════════════════════════════════════════════
  cypress:
    name: 🧪 Cypress E2E (Container ${{ matrix.containers }})
    runs-on: ubuntu-latest
    needs: build

    # ⚡ PARALLEL EXECUTION: 4 containers for speed
    strategy:
      fail-fast: false # Don't cancel other containers on failure
      matrix:
        containers: [1, 2, 3, 4]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # ⚡ OPTIMIZED: Restore cached dependencies
      - name: 💾 Restore dependency cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      # 📥 Download build from previous job
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build

      # ☁️ CYPRESS CLOUD RECORDING (Rule 1.0) - PROPERLY CONFIGURED!
      - name: 🎭 Run Cypress E2E tests (with Cloud recording)
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          headed: false
          # ☁️ CYPRESS CLOUD CONFIGURATION (CRITICAL!)
          record: true # ✅ RECORD TO CYPRESS CLOUD
          parallel: true # ✅ PARALLEL EXECUTION
          group: 'E2E Tests - Chrome'
          tag: ${{ github.event_name }}
          ci-build-id: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}
        env:
          # ✅ CYPRESS CLOUD CREDENTIALS (from GitHub Secrets)
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # ✅ BUILD IDENTIFICATION (best practice 2025)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Environment for tests
          CYPRESS_BASE_URL: http://localhost:3000

      # 📸 Upload screenshots on failure
      - name: 📸 Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.containers }}
          path: cypress/screenshots
          retention-days: 7

      # 🎬 Upload videos (always)
      - name: 🎬 Upload videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.containers }}
          path: cypress/videos
          retention-days: 7

  # ═══════════════════════════════════════════════════════════════════════════
  # 🐳 STAGE 4: BUILD & PUSH DOCKER IMAGE (Production only)
  # ═══════════════════════════════════════════════════════════════════════════
  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, cypress]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ═══════════════════════════════════════════════════════════════════════════
  # 🚀 STAGE 5: DEPLOY TO VERCEL (Production only)
  # ═══════════════════════════════════════════════════════════════════════════
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    environment:
      name: production
      url: https://neko-defense-dashboard.vercel.app

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel

      - name: 🔗 Link Vercel project
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "⚠️ VERCEL_TOKEN not set, skipping deployment"
            exit 0
          fi

          echo "🐾 Linking Vercel project, nyaa~!"
          mkdir -p .vercel

          cat > .vercel/project.json << EOF
          {
            "orgId": "$VERCEL_ORG_ID",
            "projectId": "$VERCEL_PROJECT_ID"
          }
          EOF

          echo "✅ Vercel project linked!"

      - name: 🚀 Deploy to Vercel Production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "⚠️ VERCEL_TOKEN not set, skipping deployment"
            exit 0
          fi

          echo "🐾 Deploying to Vercel production, nyaa~!"
          vercel --prod --yes --token="$VERCEL_TOKEN"
          echo "✅ Deployment complete, desu~!"

  # ═══════════════════════════════════════════════════════════════════════════
  # ✅ STAGE 6: PIPELINE STATUS SUMMARY
  # ═══════════════════════════════════════════════════════════════════════════
  status:
    name: ✅ Pipeline Status
    runs-on: ubuntu-latest
    needs: [quality, build, cypress, docker, deploy]
    if: always()

    steps:
      - name: 📊 Pipeline summary
        run: |
          echo "🐾⚡ NEKO DEFENSE CI/CD PIPELINE COMPLETE! ⚡🐾"
          echo "═══════════════════════════════════════════════════════════"
          echo ""
          echo "📋 STAGE RESULTS:"
          echo "  🔍 Code Quality:  ${{ needs.quality.result }}"
          echo "  🏗️ Build:         ${{ needs.build.result }}"
          echo "  🧪 Cypress E2E:   ${{ needs.cypress.result }}"
          echo "  🐳 Docker Build:  ${{ needs.docker.result }}"
          echo "  🚀 Deployment:    ${{ needs.deploy.result }}"
          echo ""

          # Check if all critical stages passed
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.cypress.result }}" == "success" ]]; then
            echo "🎉 ALL CHECKS PASSED - LEGENDARY MODE ACTIVATED! 💖⚡"
            echo ""
            echo "☁️ Cypress Cloud Dashboard:"
            echo "   https://cloud.cypress.io/projects/9xzw4h"
            echo ""
            echo "*purrs in CI/CD excellence* 😻🎯"
          else
            echo "⚠️ Some checks failed - review logs above, nyaa~!"
            exit 1
          fi

      # Optional: Slack/Discord notification
      # - name: 🔔 Send notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: 'Neko Defense Pipeline: ${{ job.status }}'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
